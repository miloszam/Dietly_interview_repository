{
	"info": {
		"_postman_id": "a66fa0b0-4de9-4b6a-9538-61580bdab23c",
		"name": "Dietly_Rekrutacja",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25276058"
	},
	"item": [
		{
			"name": "USERS",
			"item": [
				{
					"name": "GET_users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json()\r",
									"\r",
									"\r",
									"pm.test(\"Duplikat\", function () {\r",
									"    pm.expect(jsonData[0]['name']).eq('Frodo Baggins')\r",
									"    pm.expect(jsonData[1]['name']).eq('Bilbo Baggins')\r",
									"    });\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json()\r",
									"\r",
									"\r",
									"pm.test(\"Name exists\", function () {\r",
									"    //pm.expect(jsonData[0]['name']).eq('The Prancing Pony')\r",
									"    pm.expect(jsonData['name']).eq('User Test')\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n    \"name\": \"User Test\",\r\n    \"email\": \"u.test@abc.com\"\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT_user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json()\r",
									"\r",
									"\r",
									"pm.test(\"Name exists\", function () {\r",
									"    //pm.expect(jsonData[0]['name']).eq('The Prancing Pony')\r",
									"    pm.expect(jsonData['name']).eq('Milosz Zamojski')\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n    \"name\": \"Milosz Zamojski\",\r\n    \"email\": \"m.zamojski@abc.com\"\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"5"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CATERINGS",
			"item": [
				{
					"name": "GET_caterings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json()\r",
									"\r",
									"\r",
									"pm.test(\"Name exists\", function () {\r",
									"    pm.expect(jsonData[0]['name']).eq('The Prancing Pony')\r",
									"    pm.expect(jsonData[1]['name']).eq('MasterElves')\r",
									"    });\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/caterings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"caterings"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST_caterings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json()\r",
									"\r",
									"\r",
									"pm.test(\"Name exists\", function () {\r",
									"    //pm.expect(jsonData[0]['name']).eq('The Prancing Pony')\r",
									"    pm.expect(jsonData['name']).eq('Test Catering')\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Test Catering\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/caterings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"caterings"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT_caterings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json()\r",
									"\r",
									"\r",
									"pm.test(\"Name exists\", function () {\r",
									"    //pm.expect(jsonData[0]['name']).eq('The Prancing Pony')\r",
									"    pm.expect(jsonData['name']).eq('Test Catering Edited')\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Test Catering Edited\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/caterings/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"caterings",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE_caterings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/caterings/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"caterings",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DIETS",
			"item": [
				{
					"name": "GET_diet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json()\r",
									"\r",
									"\r",
									"pm.test(\"Name exist\", function () {\r",
									"    pm.expect(jsonData[0]['name']).eq(\"Hobbits' Standard\")\r",
									"    pm.expect(jsonData[1]['name']).eq('Shire Keto')\r",
									"    });\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/diets",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"diets"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST_diet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json()\r",
									"\r",
									"\r",
									"pm.test(\"Name exists\", function () {\r",
									"    //pm.expect(jsonData[0]['name']).eq('The Prancing Pony')\r",
									"    pm.expect(jsonData['name']).eq('Test Diet')\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Test Diet\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/diets",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"diets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT_diet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json()\r",
									"\r",
									"\r",
									"pm.test(\"Name exists\", function () {\r",
									"    //pm.expect(jsonData[0]['name']).eq('The Prancing Pony')\r",
									"    pm.expect(jsonData['name']).eq('Test Diet Edited')\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Test Diet Edited\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/diets/9",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"diets",
								"9"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE_diet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/diets/9",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"diets",
								"9"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ORDERS",
			"item": [
				{
					"name": "GET_order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST_order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 16,\r\n  \"datetime\": \"2022-03-20 21:22:22.000\",\r\n  \"from_date\": \"2022-04-01\",\r\n  \"to_date\": \"2022-04-20\",\r\n  \"dietId\": 4,\r\n  \"userId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT_order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 16,\r\n  \"datetime\": \"2022-03-20 21:22:22.000\",\r\n  \"from_date\": \"2022-04-10\",\r\n  \"to_date\": \"2022-04-30\",\r\n  \"dietId\": 6,\r\n  \"userId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/16",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"16"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE_order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/16",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"16"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000"
		}
	]
}